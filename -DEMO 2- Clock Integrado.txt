//--------------------------------------------------------- BIBLIOTECAS NECESARIAS ---------------------------------------------------------
#include <Wire.h> 		
#include <LiquidCrystal_I2C.h> 
#include <DHT.h> 		
#include <virtuabotixRTC.h>

//------------------------------------------------------------------ PINES ------------------------------------------------------------------
#define DHTPIN 7
#define DHTTYPE DHT11   
#define UVPIN A2        // Pin de salida analógica del ML8511
#define BUZZER 6        // Pin digital para el buzzer

//----------------------------------------------------------------- OBJETOS -----------------------------------------------------------------
// "Crear el clock", CABLES = CLOCK-DATA-RESET (CLK-DAT-RST)
virtuabotixRTC myRTC(5, 4, 3);
DHT dht(DHTPIN, DHTTYPE);	
LiquidCrystal_I2C lcd(0x27, 16, 2); 

//--------------------------------------------------------------- PROTOTIPOS ---------------------------------------------------------------
void inicio();
void fechayHora();
float temperaturayHumedad(float h, float t);
float UV();
void controlBuzzer(float indiceUV);

//----------------------------------------------------------------- SETUP -----------------------------------------------------------------
void setup() {

  Serial.begin(9600);
  inicio();
  // Configurar fecha y hora (solo la 1ra vez)
  //myRTC.setDS1302Time(30, 39, 14, 2, 26, 8, 2025);
}

//------------------------------------------------------------------ LOOP ------------------------------------------------------------------
void loop() {
  lcd.clear();
  myRTC.updateTime();
  // Variables del DHT
  float h = dht.readHumidity(); // lee la humedad
  float t = dht.readTemperature(); //lee la temperatura


  // Mostrar en el LCD
  fechayHora();
  lcd.clear();

  temperaturayHumedad(h, t);
  lcd.clear();

  float indiceUV = UV();

  controlBuzzer(indiceUV); // maneja el buzzer según el índice

  delay(2000); // Actualiza cada segundo
}

//--------------------------------------------------------------- FUNCIONES ---------------------------------------------------------------
void inicio(){
  lcd.init();       // iniciar pantalla
  lcd.backlight();  // incender luz de fondo (necesario porque sino no se ve nada)
  dht.begin();      // iniciar sensor
  lcd.setCursor(0, 0); // deja el cursor del LCD al comienzo para poder escribir
  lcd.print("Iniciando"); //mensajito ;)
  lcd.setCursor(0, 1); // paso a la parte de abajo 
  lcd.print("centralita..."); //mensajito ;)
  delay(2000);
}

float temperaturayHumedad(float h, float t){
  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(t);
  lcd.print((char)223); // Símbolo de grados "°" (el LCD no lo muestra bien sino)
  lcd.print("C");

  lcd.setCursor(0, 1);
  lcd.print("Humedad: ");
  lcd.print(h);
  lcd.print("%");
  delay(3000);
}

void fechayHora(){
    // Mostrar fecha y hora durante 3 segundos
  for (int i = 0; i <4 ; i++) {
    myRTC.updateTime();  // actualizar RTC
    lcd.setCursor(0, 0);
    lcd.print(myRTC.dayofmonth);
    lcd.print("/");
    lcd.print(myRTC.month);
    lcd.print("/");
    lcd.print(myRTC.year);

    lcd.setCursor(0, 1);
    if (myRTC.hours < 10) lcd.print("0");  
    lcd.print(myRTC.hours);
    lcd.print(":");
    if (myRTC.minutes < 10) lcd.print("0");
    lcd.print(myRTC.minutes);
    lcd.print(":");
    if (myRTC.seconds < 10) lcd.print("0");
    lcd.print(myRTC.seconds);

    delay(1000); // refresca cada 1 segundo
  }

}

float UV(){
  int lecturaUV = analogRead(UVPIN);
  float voltage = lecturaUV * (5.0 / 1023.0); // Convertir a voltaje
  float indiceUV = mapfloat(voltage, 0.99, 2.9, 0.0, 15.0); 
  // 0.99V ~ 0 UV   |   2.9V ~ 15 UV (rango típico del ML8511)
  // Corrección para evitar valores negativos
  if (indiceUV < 0) {
    indiceUV = 0;
  }
  lcd.setCursor(0, 0);
  lcd.print("Indice UV:");
  lcd.print(indiceUV, 1); // 1 decimal
  delay (1000);
  return indiceUV;
}

void controlBuzzer(float indiceUV) {
  if (indiceUV > 8) {   // condición de peligro
    lcd.setCursor(4, 1);
    lcd.print("PELIGRO");
    for(int j=0; j<2; j++){
      for (int k = 0; k < 3; k++) {
        tone(BUZZER, 700); // Arranca el tono
        delay(300);         // Lo mantiene
        noTone(BUZZER);     // Lo apaga
        delay(500);        // Pausa entre beeps
      }
    }
  }
}

// Función auxiliar para mapear float (igual que map() pero con decimales)
float mapfloat(float x, float in_min, float in_max, float out_min, float out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
