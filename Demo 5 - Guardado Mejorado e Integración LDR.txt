//--------------------------------------------------------- BIBLIOTECAS NECESARIAS ---------------------------------------------------------
#include <Wire.h>               
#include <LiquidCrystal_I2C.h>  
#include <DHT.h>                
#include <virtuabotixRTC.h>
#include <SD.h>

//------------------------------------------------------------------ PINES ------------------------------------------------------------------
#define DHTPIN 7
#define DHTTYPE DHT11
#define UVPIN A2        
#define LDRPIN A1       // Pin analógico para la fotorresistencia
#define BUZZER 6        
#define chipSelect 10

//------------------------------------------------------------------ VARIABLES GLOBALES --------------------------------------------------
const int intervalo = 1000;   // Intervalo de actualización en milisegundos
const int duracion = 4000;   // Duración de cada pantalla en milisegundos
const int iteraciones = duracion / intervalo;

//----------------------------------------------------------------- OBJETOS -----------------------------------------------------------------
virtuabotixRTC myRTC(5, 4, 3);         //CLK=5, DAT=4, RST=3
DHT dht(DHTPIN, DHTTYPE);
LiquidCrystal_I2C lcd(0x27, 16, 2);    //Dirección, columnas, filas
File archivo;                           //Archivo para guardar las mediciones

//---------------------------------------------------------------- VARIABLES ----------------------------------------------------------------
int ultimoMinutoGuardado = -1;  //control para guardar cada 2 minutos

//--------------------------------------------------------------- PROTOTIPOS ---------------------------------------------------------------
void inicio();
void mostrarFechaHora();
void mostrarTemperaturaHumedad();
float mostrarUV();
void controlBuzzer(float indiceUV);
float mostrarLuz();
void inicioSD();
void guardarDatos(float t, float h, float indiceUV, float porcentajeLuz);

//----------------------------------------------------------------- SETUP -----------------------------------------------------------------
void setup() {
  Serial.begin(9600);
  inicio();
  inicioSD();
  lcd.clear();
}

//------------------------------------------------------------------ LOOP ------------------------------------------------------------------
void loop() {
  myRTC.updateTime(); //Actualizar tiempo del RTC

  //Leer sensor DHT11
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  //Mostrar fecha y hora
  mostrarFechaHora();
  lcd.clear();

  //Mostrar temperatura y humedad
  mostrarTemperaturaHumedad();
  lcd.clear();

  //Mostrar índice UV
  float indiceUV = mostrarUV();
  lcd.clear();

  //Mostrar luz ambiente y guardar el porcentaje
  float porcentajeLuz = mostrarLuz();
  lcd.clear();

  //Control del buzzer según índice UV
  controlBuzzer(indiceUV);

  //Guardar datos cada 2 minutos
  if (myRTC.minutes % 2 == 0 && myRTC.minutes != ultimoMinutoGuardado) {
    guardarDatos(t, h, indiceUV, porcentajeLuz);
    ultimoMinutoGuardado = myRTC.minutes;
  }
}

//--------------------------------------------------------------- FUNCIONES ---------------------------------------------------------------
void inicio() {
  lcd.init();
  lcd.backlight();
  dht.begin();
  lcd.setCursor(0, 0);
  lcd.print("Iniciando");
  lcd.setCursor(0, 1);
  lcd.print("centralita..."); 
  delay(2000);
}

void mostrarFechaHora() {
  for (int i = 0; i < 4; i++) { // 4 segundos
    myRTC.updateTime();
    lcd.setCursor(4, 0);
    lcd.print(myRTC.dayofmonth);
    lcd.print("/");
    lcd.print(myRTC.month);
    lcd.print("/");
    lcd.print(myRTC.year);

    lcd.setCursor(4, 1);
    if (myRTC.hours < 10) lcd.print("0");
    lcd.print(myRTC.hours);
    lcd.print(":");
    if (myRTC.minutes < 10) lcd.print("0");
    lcd.print(myRTC.minutes);
    lcd.print(":");
    if (myRTC.seconds < 10) lcd.print("0");
    lcd.print(myRTC.seconds);

    delay(1000); // actualización cada 1 segundo para fecha/hora
  }
}

void mostrarTemperaturaHumedad() {
  for (int i = 0; i < iteraciones; i++) {
    float h = dht.readHumidity();
    float t = dht.readTemperature();

    lcd.setCursor(2, 0);
    lcd.print("Temp: ");
    lcd.print(t, 1);
    lcd.print((char)223);
    lcd.print("C   ");

    lcd.setCursor(2, 1);
    lcd.print("Humedad: ");
    lcd.print(h, 0);
    lcd.print("%   ");

    delay(intervalo);
  }
}

float mostrarUV() {
  float indiceUV = 0;
  for (int i = 0; i < iteraciones; i++) {
    int lecturaUV = analogRead(UVPIN);
    float voltage = lecturaUV * (5.0 / 1023.0);
    indiceUV = (voltage - 0.99) * (15.0 / (2.9 - 0.99));
    if (indiceUV < 0) indiceUV = 0;

    lcd.setCursor(1, 0);
    lcd.print("Indice UV: ");
    lcd.print(indiceUV, 1);

    delay(intervalo);
  }
  return indiceUV;
}

float mostrarLuz() {
  float porcentaje = 0;
  for (int i = 0; i < iteraciones; i++) {
    int lectura = analogRead(LDRPIN);
    porcentaje = lectura / 1023.0 * 100;

    lcd.setCursor(4, 0);
    lcd.print("Luz: ");
    lcd.print(porcentaje, 0);
    lcd.print("%   ");

    
    if (porcentaje < 30) {
      lcd.setCursor(4, 1);
      lcd.print("Poca luz     "); 
    } else if (porcentaje < 70) {
      lcd.setCursor(4, 1);
      lcd.print("Normal       ");
    } else {
      lcd.setCursor(3, 1);
      lcd.print("Mucha luz    ");
    }

    delay(intervalo);
  }
  return porcentaje;
}

void controlBuzzer(float indiceUV) {
  if (indiceUV > 8) {   // condición de peligro
    lcd.setCursor(4, 1);
    lcd.print("PELIGRO");
    for(int j=0; j<2; j++){
      for (int k = 0; k < 3; k++) {
        tone(BUZZER, 700); //Frecuencia del tono 
        delay(300);         // Lo mantiene
        noTone(BUZZER);     // Lo apaga
        delay(500);        // Pausa entre beeps
      }
    }
  }
}

void inicioSD() {
  Serial.println("Iniciando SD...");
  if (!SD.begin(chipSelect)) {
    lcd.clear();
    lcd.setCursor(4, 0);
    lcd.print("Error SD");
    Serial.println("Error SD");
    while (1); 
  }

  if (!SD.exists("datos.csv")) {
    archivo = SD.open("datos.csv", FILE_WRITE);
    if (archivo) {
      archivo.println("Fecha,Hora,Temperatura,Humedad,Indice UV,Luz");
      archivo.close();
      Serial.println("Archivo creado");
    }
  }
  Serial.println("SD lista");
}

void guardarDatos(float t, float h, float indiceUV, float porcentajeLuz) {
  archivo = SD.open("datos.csv", FILE_WRITE);

  if (archivo) {
    char fecha[15];
    char hora[15];
    sprintf(fecha, "%02d/%02d/%04d", myRTC.dayofmonth, myRTC.month, myRTC.year);
    sprintf(hora, "%02d:%02d:%02d", myRTC.hours, myRTC.minutes, myRTC.seconds);

    archivo.print(fecha);
    archivo.print(",");
    archivo.print(hora);
    archivo.print(",");
    archivo.print(t);
    archivo.print(",");
    archivo.print(h);
    archivo.print(",");
    archivo.print(indiceUV, 1);
    archivo.print(",");
    archivo.println(porcentajeLuz, 1);

    archivo.close();
    Serial.print("Guardado: ");
    Serial.println(hora);
  } else {
    Serial.println("Error al abrir datos.csv");
  }
}
